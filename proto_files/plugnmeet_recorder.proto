syntax = "proto3";
package plugnmeet;

option go_package = "github.com/mynaparrot/plugnmeet-protocol/plugnmeet";

message PlugNmeetToRecorder {
  string from = 1;
  RecordingTasks task = 2;
  string room_id = 3;
  string room_sid = 4;
  string recording_id = 5;
  string recorder_id = 6;
  string access_token = 7;
  optional string rtmp_url = 8;
}

message RecorderToPlugNmeet {
  string from = 1;
  RecordingTasks task = 2;
  bool status = 3;
  string msg = 4;
  string recording_id = 5;
  string room_id = 6;
  string room_sid = 7;
  string recorder_id = 8;
  string file_path = 9;
  uint64 file_size = 10;
}

message FromParentToChild {
  RecordingTasks task = 1;
  string recording_id = 2;
  string room_id = 3;
  string room_sid = 4;
}

message FromChildToParent {
  RecordingTasks task = 1;
  bool status = 2;
  string msg = 3;
  string recording_id = 4;
  string room_id = 5;
  string room_sid = 6;
}

enum RecordingTasks {
  START_RECORDING = 0;
  STOP_RECORDING = 1;
  START_RTMP = 2;
  STOP_RTMP = 3;
  
  END_RECORDING = 4;
  END_RTMP = 5;
  
  RECORDING_PROCEEDED = 6;
}

message StartRecorderChildArgs {
    string room_id = 1;
    string recording_id = 2;
    string room_sid = 3;
    string access_token = 4;
    PlugNmeetInfo plug_n_meet_info = 5;
    bool post_mp4_convert = 6;
    CopyToPath copy_to_path = 7;
    RecorderServiceType serviceType = 8;
    optional string recorder_id = 9;
    optional string rtmp_url = 10;
    string websocket_url = 11;
    optional string custom_chrome_path = 12;
}

message PlugNmeetInfo {
    string host = 1;
    string api_key = 2;
    string api_secret = 3;
    optional string join_host = 4;
}

message CopyToPath {
    string main_path = 1;
    optional string sub_path = 2;
}

enum RecorderServiceType {
  RECORDING = 0;
  RTMP = 1;
}